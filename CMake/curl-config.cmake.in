#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://curl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
# SPDX-License-Identifier: curl
#
###########################################################################
@PACKAGE_INIT@

option(CURL_USE_PKGCONFIG "Enable pkg-config to detect @PROJECT_NAME@ dependencies. Default: @CURL_USE_PKGCONFIG@" "@CURL_USE_PKGCONFIG@")

include(CMakeFindDependencyMacro)

set(_libs "")
if("@USE_OPENSSL@")
  if("@OPENSSL_VERSION_MAJOR@")
    find_dependency(OpenSSL "@OPENSSL_VERSION_MAJOR@")
  else()
    find_dependency(OpenSSL)
  endif()
endif()
if("@HAVE_LIBZ@")
  find_dependency(ZLIB "@ZLIB_VERSION_MAJOR@")
endif()
if("@USE_BEARSSL@")
  find_dependency(BearSSL)
endif()
if("@HAVE_BROTLI@")
  find_dependency(Brotli)
endif()
if("@USE_ARES@")
  find_dependency(Cares NAMES "c-ares")
endif()
if("@HAVE_GSSAPI@")
  find_dependency(GSS)
endif()
if("@USE_GSASL@")
  find_dependency(Libgsasl)
endif()
if(NOT "@USE_WIN32_LDAP@" AND NOT "@CURL_DISABLE_LDAP@")
  find_dependency(LDAP)
endif()
if("@HAVE_LIBIDN2@")
  find_dependency(Libidn2)
endif()
if("@USE_LIBPSL@")
  find_dependency(Libpsl)
endif()
if("@USE_LIBRTMP@")
  find_dependency(Librtmp)
endif()
if("@USE_LIBSSH@")
  find_dependency(Libssh)
endif()
if("@USE_LIBSSH2@")
  find_dependency(Libssh2)
endif()
if("@USE_LIBUV@")
  find_dependency(Libuv)
endif()
if("@USE_MSH3@")
  find_dependency(MSH3)
endif()
if("@USE_MBEDTLS@")
  find_dependency(MbedTLS)
endif()
if("@USE_NGHTTP2@")
  find_dependency(NGHTTP2)
endif()
if("@USE_NGHTTP3@")
  find_dependency(NGHTTP3)
endif()
if("@USE_NGTCP2@")
  find_dependency(NGTCP2)
endif()
if("@USE_GNUTLS@")
  if(CURL_USE_PKGCONFIG)
    find_dependency(PkgConfig)
    pkg_check_modules(GNUTLS "gnutls")
  endif()
  if(NOT GNUTLS_FOUND)
    find_dependency(GnuTLS CONFIG)
  endif()
  find_dependency(Nettle)
endif()
if("@USE_QUICHE@")
  find_dependency(Quiche)
endif()
if("@USE_RUSTLS@")
  find_dependency(Rustls)
endif()
if("@USE_WOLFSSH@")
  find_dependency(WolfSSH)
endif()
if("@USE_WOLFSSL@")
  find_dependency(WolfSSL)
endif()
if("@HAVE_ZSTD@")
  find_dependency(Zstd)
endif()

include("${CMAKE_CURRENT_LIST_DIR}/@TARGETS_EXPORT_NAME@.cmake")

# Alias for either shared or static library
if(NOT TARGET @PROJECT_NAME@::@LIB_NAME@)
  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.11 AND CMAKE_VERSION VERSION_LESS 3.18)
    set_target_properties(@PROJECT_NAME@::@LIB_SELECTED@ PROPERTIES IMPORTED_GLOBAL TRUE)
  endif()
  add_library(@PROJECT_NAME@::@LIB_NAME@ ALIAS @PROJECT_NAME@::@LIB_SELECTED@)
endif()

cmake_policy(GET CMP0099 _has_CMP0099)  # https://cmake.org/cmake/help/latest/policy/CMP0099.html
if(NOT _has_CMP0099 AND _lib)
  message(STATUS "CURL: CMP0099 not detected, resorting to workaround.")
  # CMake before CMP0099 (CMake 3.17 2020-03-20) did not endorse the concept of libdirs and lib names.
  # It expected libs to have an absolute filename. As a workaround, manually apply dependency libdirs
  # to the libcurl target, for CMake consumers without this policy set.
  foreach(_lib IN ITEMS libs)
    get_target_property(_libdirs "${_lib}" INTERFACE_LINK_DIRECTORIES)
    if(_libdirs)
      foreach(_target IN ITEMS @PROJECT_NAME@::libcurl)
        if(TARGET "${_target}")
          target_link_directories("${_target}" INTERFACE ${_libdirs})
        endif()
      endforeach()
    endif()
  endforeach()
endif()

# For compatibility with CMake's FindCURL.cmake
set(CURL_VERSION_STRING "@CURLVERSION@")
set(CURL_LIBRARIES @PROJECT_NAME@::@LIB_NAME@)
set_and_check(CURL_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")

set(CURL_SUPPORTED_PROTOCOLS "@CURL_SUPPORTED_PROTOCOLS_LIST@")
set(CURL_SUPPORTED_FEATURES "@CURL_SUPPORTED_FEATURES_LIST@")

foreach(_item IN LISTS CURL_SUPPORTED_PROTOCOLS CURL_SUPPORTED_FEATURES)
  set(CURL_SUPPORTS_${_item} TRUE)
endforeach()

set(_missing_req "")
foreach(_item IN LISTS CURL_FIND_COMPONENTS)
  if(CURL_SUPPORTS_${_item})
    set(CURL_${_item}_FOUND TRUE)
  elseif(CURL_FIND_REQUIRED_${_item})
    list(APPEND _missing_req ${_item})
  endif()
endforeach()

if(_missing_req)
  string(REPLACE ";" " " _missing_req "${_missing_req}")
  if(CURL_FIND_REQUIRED)
    message(FATAL_ERROR "CURL: missing required components: ${_missing_req}")
  endif()
  unset(_missing_req)
endif()

check_required_components("@PROJECT_NAME@")
