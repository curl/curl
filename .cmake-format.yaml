# Copyright (C) Viktor Szakats
#
# SPDX-License-Identifier: curl

# https://cmake-format.readthedocs.io/en/latest/cmake-lint.html
# https://github.com/cheshirekow/cmake_format/blob/master/cmakelang/configuration.py

# Options affecting formatting
format:
  # Disable formatting entirely, making cmake-format a no-op
  disable: false
  # How wide to allow formatted cmake files
  line_width: 132
  # How many spaces to tab for indent
  tab_size: 2
  # If true, lines are indented using tab characters (utf-8
  # 0x09) instead of <tab_size> space characters (utf-8 0x20).
  # In cases where the layout would require a fractional tab
  # character, the behavior of the  fractional indentation is
  # governed by <fractional_tab_policy>
  use_tabchars: false
  # If <use_tabchars> is True, then the value of this variable
  # indicates how fractional indentions are handled during
  # whitespace replacement. If set to 'use-space', fractional
  # indentation is left as spaces (utf-8 0x20). If set to
  # '`round-up` fractional indentation is replaced with a single'
  # tab character (utf-8 0x09) effectively shifting the column
  # to the next tabstop
  fractional_tab_policy: use-space
  # If an argument group contains more than this many sub-groups
  # (parg or kwarg groups) then force it to a vertical layout.
  max_subgroups_hwrap: 2
  # If a positional argument group contains more than this many
  # arguments, then force it to a vertical layout.
  max_pargs_hwrap: 6
  # If a cmdline positional group consumes more than this many
  # lines without nesting, then invalidate the layout (and nest)
  max_rows_cmdline: 2
  # If true, separate flow control names from their parentheses
  # with a space
  separate_ctrl_name_with_space: false
  # If true, separate function names from parentheses with a
  # space
  separate_fn_name_with_space: false
  # If a statement is wrapped to more than one line, than dangle
  # the closing parenthesis on its own line.
  dangle_parens: false
  # If the trailing parenthesis must be 'dangled' on its on
  # 'line, then align it to this reference: `prefix`: the start'
  # 'of the statement,  `prefix-indent`: the start of the'
  # 'statement, plus one indentation  level, `child`: align to'
  # the column of the arguments
  dangle_align: prefix
  # If the statement spelling length (including space and
  # parenthesis) is smaller than this amount, then force reject
  # nested layouts.
  min_prefix_chars: 4
  # If the statement spelling length (including space and
  # parenthesis) is larger than the tab width by more than this
  # amount, then force reject un-nested layouts.
  max_prefix_chars: 10
  # If a candidate layout is wrapped horizontally but it exceeds
  # this many lines, then reject the layout.
  max_lines_hwrap: 2
  # What style line endings to use in the output.
  line_ending: unix
  # Format command names consistently as 'lower' or 'upper' case
  command_case: canonical
  # Format keywords consistently as 'lower' or 'upper' case
  keyword_case: unchanged
  # A list of command names which should always be wrapped
  always_wrap: []
  # If true, the argument lists which are known to be sortable
  # will be sorted lexicographicall
  enable_sort: true
  # If true, the parsers may infer whether or not an argument
  # list is sortable (without annotation).
  autosort: false
  # By default, if cmake-format cannot successfully fit
  # everything into the desired linewidth it will apply the
  # last, most aggressive attempt that it made. If this flag is
  # True, however, cmake-format will print error, exit with non-
  # zero status code, and write-out nothing
  require_valid_layout: false
  # A dictionary mapping layout nodes to a list of wrap
  # decisions. See the documentation for more information.
  layout_passes:
    set_property:
      disable: true
    get_property:
      disable: true

# Options affecting the linter
lint:
  # a list of lint codes to disable
  disabled_codes: ['C0113']
  # regular expression pattern describing valid function names
  function_pattern: curl_[0-9a-z_]+
  # regular expression pattern describing valid macro names
  macro_pattern: curl_[0-9a-z_]+
  # regular expression pattern describing valid names for
  # variables with global (cache) scope
  global_var_pattern: '[A-Z][0-9A-Z_]+'
  # regular expression pattern describing valid names for
  # variables with global scope (but internal semantic)
  internal_var_pattern: _[a-z][0-9a-z_]+
  # regular expression pattern describing valid names for
  # variables with local scope
  local_var_pattern: '_[a-z][a-z0-9_]+'
  # regular expression pattern describing valid names for
  # privatedirectory variables
  private_var_pattern: _[0-9a-z_]+
  # regular expression pattern describing valid names for public
  # directory variables
  public_var_pattern: '([A-Z][0-9A-Z_]+|[A-Z][A-Za-z0-9]+_FOUND|[a-z]+_SOURCES|prefix|exec_prefix|includedir|libdir|ssize_t|_FILE_OFFSET_BITS)'
  # regular expression pattern describing valid names for
  # function/macro arguments and loop variables.
  argument_var_pattern: '_[a-z][a-z0-9_]+'
  # regular expression pattern describing valid names for
  # keywords used in functions or macros
  keyword_pattern: '[A-Z][0-9A-Z_]+'
  # In the heuristic for C0201, how many conditionals to match
  # within a loop in before considering the loop a parser.
  max_conditionals_custom_parser: 2
  # Require at least this many newlines between statements
  min_statement_spacing: 1
  # Require no more than this many newlines between statements
  max_statement_spacing: 2
  max_returns: 6
  max_branches: 12
  max_arguments: 5
  max_localvars: 15
  max_statements: 50
# Options affecting file encoding
encode:
  # If true, emit the unicode byte-order mark (BOM) at the start
  # of the file
  emit_byteorder_mark: false
  # Specify the encoding of the input file. Defaults to utf-8
  input_encoding: 'utf-8'
  # Specify the encoding of the output file. Defaults to utf-8.
  # Note that cmake only claims to support utf-8 so be careful
  # when using anything else
  output_encoding: 'utf-8'
